library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.ALL;
USE ieee.std_logic_unsigned.all;


entity multi_booth is
GENERIC (N : INTEGER := 4);
port (
		M, Q: in std_logic_vector(N-1 downto 0);
		R: in std_logic;
		Clock: in std_logic;
		Saida: out std_logic_vector((N*2)-1 downto 0);
		soma, zero_out:  out std_logic_vector(N-1 downto 0)
     );
end multi_booth;

architecture behv of multi_booth is
component Reg is
generic (N : integer);
port(
		 CLK: in std_logic;
		 R: in std_logic;
		 E: in std_logic;
		 Dlc: in std_logic;
		 D: in std_logic_vector(N-1 downto 0);
		 Q: out std_logic_vector(N-1 downto 0)
		 );
end component;

component Comparador is
port(
		A:  in  std_logic;
		B:  in  std_logic;
		Maior:  out  std_logic;
		Igual:  out  std_logic;
		Menor:  out  std_logic
);
end component;

component BC is
port(
		Amaior, Amenor, Aigual: in std_logic;
		Pronto: in std_logic;
		CLK: in std_logic;
		RESET: in std_logic;
		RegM, RegN, RegAQ: out std_logic;
		OP, mux_aq: out std_logic_vector(1 downto 0);
		Mux_count: out std_logic;
		Dlc, R: out std_logic
);
end component;

component ContaN is
GENERIC (N : INTEGER);
port(CLK: in std_logic;
  CLR: in std_logic;
  ENA: in std_logic;
  S: out std_logic
  );
end component;

signal Amaior, Amenor, AIgual, Pronto, mux_count, reset, RegM, RegAQ, RegCount, DLC, Reset_Reg, NA: std_logic;
signal OP, mux_aq: Std_logic_vector(1 downto 0);
signal Maux: Std_logic_vector(N-1 downto 0);
signal Count, Countaux: Std_logic_vector(N-1 downto 0);
signal AQAux, AQ: Std_logic_vector((N*2)-1 downto 0);
signal Saux, signed_sem_motivo: SIGNED(N-1 downto 0);
signal S,numero_contador: std_logic_vector(N-1 downto 0);
constant zero: std_LOGIC_VECTOR(N-1 downto 0) := (others => '0') ;

begin 

CONTROLE: BC port map(
			Amaior => Amaior,
			Amenor => Amenor,
			Aigual => Aigual,
			Pronto => Pronto,
			CLK => Clock,
			RESET => R,
			RegM => RegM,
			RegN => RegCount,
			RegAQ => RegAQ,
			OP => OP,
			Dlc => Dlc,
			R => Reset_Reg,
			Mux_count => mux_count,
			mux_aq => mux_aq 
);

PRONTO_SINAL : ContaN generic map (N => N)
					port map(
					CLK => Clock,
					CLR => Reset_Reg,
					ENA => RegCount,
					S => Pronto);
					
with mux_aq select
	AQ <=	S&(AQAux(N-1 downto 0)) when "00",
			zero&Q when "01",
			AQAux when others;

with op select
	S <=  AQAux(N*2-1 downto N) - Maux when "01",
			AQAux(N*2-1 downto N) + Maux when "10",
			AQAux(N*2 - 1 downto N) when others;

soma <= S;
with pronto select
	Saida <= AQAux  when '1',
				zero&zero when others;
zero_out <= zero;		
	

REGISTM : Reg generic map (N => N)
			port map (
			CLK => Clock,
			R => Reset_Reg,
			E => RegM,
			Dlc => NA,
			D => M,
			Q => Maux
			);


REGISTAQ : Reg generic map (N => N*2)
			port map (
			CLK => Clock,
			R => Reset_Reg,
			E => RegAQ,
			Dlc => Dlc,
			D => AQ,
			Q => AQaux
			);


COMP: Comparador port map(
			A => AQAux(0),
			B => AQAux(1),
			Maior => Amaior,
			Igual => Aigual,
			Menor => Amenor
			);

			
end behv;
    